name: CMake

on: [push, pull_request, workflow_dispatch, label]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository, including submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Pre-requisites
      # Install any pre-requisites required by your CMake project here
      run: sudo apt-get install -y build-essential cmake clang llvm qemu-user-binfmt crossbuild-essential-riscv64

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        if [ ${{github.ref_name}} = 'main' ]; then
          cmake -B ${{github.workspace}}/build -D BUILD_IR_TESTING=ON -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        else
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        fi

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j $(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        if [ ${{github.ref_name}} = 'main' ]; then
          ctest -C ${{env.BUILD_TYPE}} --verbose -j $(nproc)
        else
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure --stop-on-failure -j $(nproc)
        fi

